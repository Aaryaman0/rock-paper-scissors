{"version":3,"sources":["123.jpeg","App.js","reportWebVitals.js","index.js"],"names":["options","App","props","state","count","playerSelection","computerSelection","result","clicked","bind","Math","floor","random","this","setState","console","log","num","Random","className","src","pic","alt","Button","variant","color","onMouseDown","onMouseUp","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAAe,MAA0B,iC,uBCOnCA,EAAU,CAAC,OAAQ,QAAS,YAgHnBC,E,kDAxEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXC,MAAO,EACPC,gBAAiB,GACjBC,kBAAmB,GACnBC,OAAQ,IAEV,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBARE,E,0CAWnB,WAGE,OADmBC,KAAKC,MADR,EACeD,KAAKE,Y,qBAItC,WACEC,KAAKC,SAAS,CAACT,gBAAiB,oBAAsBL,EAAQa,KAAKV,MAAMC,SACzEW,QAAQC,IAAIH,KAAKb,SACjBe,QAAQC,IAAIH,KAAKV,MAAMC,OACvBW,QAAQC,IAAIH,KAAKV,MAAME,iBACvB,IAAIY,EAAMJ,KAAKK,SACfL,KAAKC,SAAS,CAACR,kBAAmB,wBAA0BN,EAAQiB,KACpEF,QAAQC,IAAIH,KAAKV,MAAME,iBAClBQ,KAAKV,MAAMC,QAAUa,EACvBJ,KAAKC,SAAS,CAACP,OAAQ,kBAEhBM,KAAKV,MAAMC,SAAYa,EAAM,GAAK,EAC1CJ,KAAKC,SAAS,CAACP,OAAQ,aAEfU,KAAUJ,KAAKV,MAAMC,MAAQ,GAAK,GAC1CS,KAAKC,SAAS,CAACP,OAAQ,yB,oBAI3B,WAAU,IAAD,OACT,OACE,sBAAKY,UAAU,MAAf,UACE,yBAAQA,UAAU,aAAlB,UACE,oEACA,qBAAKC,IAAKC,EAAKF,UAAU,WAAWG,IAAI,SACxC,yEAIJ,cAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,YAAa,WACvDX,QAAQC,IAAI,QACZ,EAAKF,SAAS,CAAEV,MAAO,KACpBuB,UAAWd,KAAKL,QAHrB,kBAMA,cAACe,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,YAAa,WACvDX,QAAQC,IAAI,SACZ,EAAKF,SAAS,CAAEV,MAAO,KACpBuB,UAAWd,KAAKL,QAHrB,mBAMA,cAACe,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUC,YAAa,WACvDX,QAAQC,IAAI,WACZ,EAAKF,SAAS,CAAEV,MAAO,KACpBuB,UAAWd,KAAKL,QAHrB,qBAMC,4BAAIK,KAAKV,MAAME,kBACf,4BAAIQ,KAAKV,MAAMG,oBACf,4BAAIO,KAAKV,MAAMI,gB,GAnEFqB,IAAMC,WClCTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8b08411a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/123.0e229f56.jpeg\";","import pic from './123.jpeg';\nimport './App.css';\nimport { Button } from '@material-ui/core';\n//import { render } from '@testing-library/react';\nimport React from 'react';\n//import ReactDOM from 'react-dom';\n\nconst options = [\"rock\", \"paper\", \"scissors\"]\n\n/*\n//const rock = <p>You clicked Rock </p>\n//const paper = <p>You clicked Paper </p>\n///3const scissor = <p>You clicked Scissor </p>\n\nclass clickedR extends React.Component{\n  render() {\n    \n    var num = <Random />;\n    return (\n      <div>\n        <h1>\n          You played Rock.\n        </h1>\n        if (num == 1){\n          <p>The computer played Rock too, Draw!</p>\n        }\n        else if (num == 2){\n          <p>The computer played Paper, the computer wins!</p>\n        }\n        else if (num == 3) {\n          <p>The computer played Scissor, you win!</p>\n        }\n      </div>\n    );\n  }\n  //ReactDOM.render(rock, document.getElementById('root'));\n  //ReactDOM.render(<Random />, document.getElementById('root'));\n}\nfunction clickedP(props) {\n  ReactDOM.render(paper, document.getElementById('root'));\n}\nfunction clickedS(props) {\n  ReactDOM.render(scissor, document.getElementById('root'));\n}\n*/\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 4,\n      playerSelection: \"\",\n      computerSelection: \"\",\n      result: \"\"\n    };\n    this.clicked = this.clicked.bind(this);\n  }\n\n  Random() {\n    var maxNumber = 3;\n    var randomNumber = Math.floor((Math.random() * maxNumber));\n    return randomNumber;\n  }\n\n  clicked() {\n    this.setState({playerSelection: \"You have clicked \" + options[this.state.count]});\n    console.log(this.options);\n    console.log(this.state.count);\n    console.log(this.state.playerSelection);\n    var num = this.Random();\n    this.setState({computerSelection: \"The computer chooses \" + options[num]});\n    console.log(this.state.playerSelection);\n     if (this.state.count === num){\n       this.setState({result: \"It is a Draw!\"});\n     }\n     else if (this.state.count === ((num + 1) % 3)){\n      this.setState({result: \"You Win!\"});\n     }\n     else if (num === ((this.state.count + 1) % 3)){\n      this.setState({result: \"The Computer Wins!\"});\n     }\n  }\n\n  render() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>This is a Rock-Paper-Scissors game</h1>\n        <img src={pic} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Choose one of the following options:-\n        </p>\n        </header>\n    <Button variant=\"contained\" color=\"primary\" onMouseDown={() => {\n      console.log(\"Rock\");\n      this.setState({ count: 0 });\n      }} onMouseUp={this.clicked}>\n    Rock\n    </Button>\n    <Button variant=\"contained\" color=\"primary\" onMouseDown={() => {\n      console.log(\"Paper\");\n      this.setState({ count: 1 });\n      }} onMouseUp={this.clicked}>\n     Paper\n     </Button>\n    <Button variant=\"contained\" color=\"primary\" onMouseDown={() => {\n      console.log(\"Scissor\");\n      this.setState({ count: 2 });\n      }} onMouseUp={this.clicked}>\n     Scissor\n     </Button>\n     <p>{this.state.playerSelection}</p>\n     <p>{this.state.computerSelection}</p>\n     <p>{this.state.result}</p>\n    </div>\n  );\n}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}